; global-env.scm

(load "./value-with-type.scm")
(load "./syntaxes.scm")
(load "./functions.scm")


(define global-env
  (frame 
    (list
      ; syntaxes
      (cons 'define                   (v/t 'syntax syntax-define))
      (cons 'lambda                   (v/t 'syntax syntax-lambda))
      (cons 'quote                    (v/t 'syntax syntax-quote))
      (cons 'set!                     (v/t 'syntax syntax-set!))
      (cons 'let                      (v/t 'syntax syntax-let))
      (cons 'let*                     (v/t 'syntax syntax-let*))
      (cons 'letrec                   (v/t 'syntax syntax-letrec))
      (cons 'if                       (v/t 'syntax syntax-if))
      (cons 'cond                     (v/t 'syntax syntax-cond))
      (cons 'else                     (v/t 'syntax syntax-else))
      (cons 'and                      (v/t 'syntax syntax-and))
      (cons 'or                       (v/t 'syntax syntax-or))
      (cons 'begin                    (v/t 'syntax syntax-begin))
      (cons 'do                       (v/t 'syntax syntax-do))
      (cons 'define-macro             (v/t 'syntax syntax-define-macro))
      ; functions
      (cons 'number?                  (v/t 'closure subr.number?))
      (cons '+                        (v/t 'closure subr.+))
      (cons '-                        (v/t 'closure subr.-))
      (cons '*                        (v/t 'closure subr.*))
      (cons '/                        (v/t 'closure subr./))
      (cons '=                        (v/t 'closure subr.=))
      (cons '<                        (v/t 'closure subr.<))
      (cons '<=                       (v/t 'closure subr.<=))
      (cons '>                        (v/t 'closure subr.>))
      (cons '>=                       (v/t 'closure subr.>=))
      (cons 'null?                    (v/t 'closure subr.null?))
      (cons 'pair?                    (v/t 'closure subr.pair?))
      (cons 'list?                    (v/t 'closure subr.list?))
      (cons 'symbol?                  (v/t 'closure subr.symbol?))
      (cons 'car                      (v/t 'closure subr.car))
      (cons 'cdr                      (v/t 'closure subr.cdr))
      (cons 'caar                     (v/t 'closure subr.caar))
      (cons 'cadr                     (v/t 'closure subr.cadr))
      (cons 'cdar                     (v/t 'closure subr.cdar))
      (cons 'cddr                     (v/t 'closure subr.cddr))
      (cons 'cons                     (v/t 'closure subr.cons))
      (cons 'list                     (v/t 'closure subr.list))
      (cons 'list->string             (v/t 'closure subr.list->string))
      (cons 'length                   (v/t 'closure subr.length))
      (cons 'member                   (v/t 'closure subr.member))
      (cons 'memq                     (v/t 'closure subr.memq))
      (cons 'last                     (v/t 'closure subr.last))
      (cons 'append                   (v/t 'closure subr.append))
      (cons 'assoc                    (v/t 'closure subr.assoc))
      (cons 'set-car!                 (v/t 'closure subr.set-car!))
      (cons 'set-cdr!                 (v/t 'closure subr.set-cdr!))
      (cons 'boolean?                 (v/t 'closure subr.boolean?))
      (cons 'not                      (v/t 'closure subr.not))
      (cons 'string?                  (v/t 'closure subr.string?))
      (cons 'string-ref               (v/t 'closure subr.string-ref))
      (cons 'string-append            (v/t 'closure subr.string-append))
      (cons 'string-copy              (v/t 'closure subr.string-copy))
      (cons 'string-length            (v/t 'closure subr.string-length))
      (cons 'symbol->string           (v/t 'closure subr.symbol->string))
      (cons 'string->list             (v/t 'closure subr.string->list))
      (cons 'string->number           (v/t 'closure subr.string->number))
      (cons 'string->symbol           (v/t 'closure subr.string->symbol))
      (cons 'char-alphabetic?         (v/t 'closure subr.char-alphabetic?))
      (cons 'char-numeric?            (v/t 'closure subr.char-numeric?))
      (cons 'char->integer            (v/t 'closure subr.char->integer))
      (cons 'number->string           (v/t 'closure subr.number->string))
      (cons 'procedure?               (v/t 'closure subr.procedure?))
      (cons 'eq?                      (v/t 'closure subr.eq?))
      (cons 'neq?                     (v/t 'closure subr.neq?))
      (cons 'equal?                   (v/t 'closure subr.equal?))
      (cons 'call/cc                  (v/t 'closure subr.call/cc))
      (cons 'map                      (v/t 'closure subr.map))
      (cons 'apply                    (v/t 'closure subr.apply))
      ; text
      (cons 'eof-object?              (v/t 'closure subr.eof-object?))
      (cons 'display                  (v/t 'closure subr.display))
      (cons 'read-string              (v/t 'closure subr.read-string))
      (cons 'read-line                (v/t 'closure subr.read-line))
      (cons 'write                    (v/t 'closure subr.write))
      (cons 'newline                  (v/t 'closure subr.newline))
      (cons 'flush                    (v/t 'closure subr.flush))
      (cons 'with-input-from-file     (v/t 'closure subr.with-input-from-file))
      (cons 'load                     (v/t 'closure subr.load))
      )
    '()))
