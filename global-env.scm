; global-env
(load "./frame.scm")
(load "./functions.scm")
(load "./result.scm")
(load "./syntaxes.scm")

(define global-env
  (frame 
    (list
      ; syntaxes
      (cons 'define             (v/t 'syntax syntax-define))
      (cons 'if                 (v/t 'syntax syntax-if))
      (cons 'lambda             (v/t 'syntax syntax-lambda))
      (cons 'quote              (v/t 'syntax syntax-quote))
      (cons 'set!               (v/t 'syntax syntax-set!))
      (cons 'let                (v/t 'syntax syntax-let))
      (cons 'let*               (v/t 'syntax syntax-let*))
      (cons 'letrec             (v/t 'syntax syntax-letrec))
      (cons 'cond               (v/t 'syntax syntax-cond))
      (cons 'else               (v/t 'syntax syntax-else))
      (cons 'and                (v/t 'syntax syntax-and))
      (cons 'or                 (v/t 'syntax syntax-or))
      (cons 'begin              (v/t 'syntax syntax-begin))
      (cons 'do                 (v/t 'syntax syntax-do))
      (cons 'define-macro       (v/t 'syntax syntax-define-macro))
      ; functions
      (cons 'number?            (v/t 'closure subr.number?))
      (cons '+                  (v/t 'closure subr.+))
      (cons '-                  (v/t 'closure subr.-))
      (cons '*                  (v/t 'closure subr.*))
      (cons '/                  (v/t 'closure subr./))
      (cons '=                  (v/t 'closure subr.=))
      (cons '<                  (v/t 'closure subr.<))
      (cons '<=                 (v/t 'closure subr.<=))
      (cons '>                  (v/t 'closure subr.>))
      (cons '>=                 (v/t 'closure subr.>=))
      (cons 'null?              (v/t 'closure subr.null?))
      (cons 'pair?              (v/t 'closure subr.pair?))
      (cons 'list?              (v/t 'closure subr.list?))
      (cons 'symbol?            (v/t 'closure subr.symbol?))
      (cons 'car                (v/t 'closure subr.car))
      (cons 'cdr                (v/t 'closure subr.cdr))
      (cons 'cons               (v/t 'closure subr.cons))
      (cons 'list               (v/t 'closure subr.list))
      (cons 'length             (v/t 'closure subr.length))
      (cons 'memq               (v/t 'closure subr.memq))
      (cons 'last               (v/t 'closure subr.last))
      (cons 'append             (v/t 'closure subr.append))
      (cons 'set-car!           (v/t 'closure subr.set-car!))
      (cons 'set-cdr!           (v/t 'closure subr.set-cdr!))
      (cons 'boolean?           (v/t 'closure subr.boolean?))
      (cons 'not                (v/t 'closure subr.not))
      (cons 'string?            (v/t 'closure subr.string?))
      (cons 'string-append      (v/t 'closure subr.string-append))
      (cons 'symbol->string     (v/t 'closure subr.symbol->string))
      (cons 'string->symbol     (v/t 'closure subr.string->symbol))
      (cons 'string->number     (v/t 'closure subr.string->number))
      (cons 'number->string     (v/t 'closure subr.number->string))
      (cons 'procedure?         (v/t 'closure subr.procedure?))
      (cons 'eq?                (v/t 'closure subr.eq?))
      (cons 'neq?               (v/t 'closure subr.neq?))
      (cons 'equal?             (v/t 'closure subr.equal?))
      (cons 'call/cc            (v/t 'closure subr.call/cc))
      (cons 'map                (v/t 'closure subr.map))
      (cons 'apply              (v/t 'closure subr.apply))
      ; others
      (cons 'eof-object?        (v/t 'closure subr.eof-object?))
      (cons 'display            (v/t 'closure subr.display))
      (cons 'write              (v/t 'closure subr.write))
      ; (cons 'load               (v/t 'closure subr.load))
      )
    '()))
